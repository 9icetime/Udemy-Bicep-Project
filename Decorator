// A Bicep file has the following elements.
metadata <metadata-name> = ANY

targetScope = '<scope>'

type <user-defined-data-type-name> = <type-expression>

func <user-defined-function-name> (<argument-name> <data-type>, <argument-name> <data-type>, ...) <function-data-type> => <expression>

@<decorator>(<argument>)
param <parameter-name> <parameter-data-type> = <default-value>

var <variable-name> = <variable-value>

resource <resource-symbolic-name> '<resource-type>@<api-version>' = {
  <resource-properties>
}

module <module-symbolic-name> '<path-to-file>' = {
  name: '<linked-deployment-name>'
  params: {
    <parameter-names-and-values>
  }
}

output <output-name> <output-data-type> = <output-value>


The following example shows an implementation of these elements.

metadata description = 'Creates a storage account and a web app'

@description('The prefix to use for the storage account name.')
@minLength(3)
@maxLength(11)
param storagePrefix string

param storageSKU string = 'Standard_LRS'
param location string = resourceGroup().location

var uniqueStorageName = '${storagePrefix}${uniqueString(resourceGroup().id)}'

resource stg 'Microsoft.Storage/storageAccounts@2022-09-01' = {
  name: uniqueStorageName
  location: location
  sku: {
    name: storageSKU
  }
  kind: 'StorageV2'
  properties: {
    supportsHttpsTrafficOnly: true
  }
}

module webModule './webApp.bicep' = {
  name: 'webDeploy'
  params: {
    skuName: 'S1'
    location: location
  }
}


Types
You can use the type statement to define user-defined data types.

param location string = resourceGroup().location

type storageAccountSkuType = 'Standard_LRS' | 'Standard_GRS'

type storageAccountConfigType = {
  name: string
  sku: storageAccountSkuType
}

param storageAccountConfig storageAccountConfigType = {
  name: 'storage${uniqueString(resourceGroup().id)}'
  sku: 'Standard_LRS'
}

resource storageAccount 'Microsoft.Storage/storageAccounts@2022-09-01' = {
  name: storageAccountConfig.name
  location: location
  sku: {
    name: storageAccountConfig.sku
  }
  kind: 'StorageV2'
}



func buildUrl(https bool, hostname string, path string) string => '${https ? 'https' : 'http'}://${hostname}${empty(path) ? '' : '/${path}'}'

output azureUrl string = buildUrl(true, 'microsoft.com', 'azure')


Parameters

param storageSKU string = 'Standard_LRS'

The parameter is available for use in your Bicep file.

sku: {
    name: storageSKU
  }

Parameter decorators

@allowed([
  'Standard_LRS'
  'Standard_GRS'
  'Standard_ZRS'
  'Premium_LRS'
])
param storageSKU string = 'Standard_LRS'

Variables

var uniqueStorageName = '${storagePrefix}${uniqueString(resourceGroup().id)}'

Apply this variable wherever you need the complex expression.

resource stg 'Microsoft.Storage/storageAccounts@2019-04-01' = {
    name: uniqueStorageName

Resources 

    resource stg 'Microsoft.Storage/storageAccounts@2019-06-01' = {
        name: uniqueStorageName
        location: location
        sku: {
          name: storageSKU
        }
        kind: 'StorageV2'
        properties: {
          supportsHttpsTrafficOnly: true
        }
      }



      resource storage 'Microsoft.Storage/storageAccounts@2022-09-01' = {
        name: 'examplestorage'
        location: resourceGroup().location
        kind: 'StorageV2'
        sku: {
          name: 'Standard_LRS'
        }
      
        resource service 'fileServices' = {
          name: 'default'
      
          resource share 'shares' = {
            name: 'exampleshare'
          }
        }
      }


      resource storage 'Microsoft.Storage/storageAccounts@2022-09-01' = {
        name: 'examplestorage'
        location: resourceGroup().location
        kind: 'StorageV2'
        sku: {
          name: 'Standard_LRS'
        }
      }
      
      resource service 'Microsoft.Storage/storageAccounts/fileServices@2022-09-01' = {
        name: 'default'
        parent: storage
      }
      
      resource share 'Microsoft.Storage/storageAccounts/fileServices/shares@2022-09-01' = {
        name: 'exampleshare'
        parent: service
      }



Modules

module webModule './webApp.bicep' = {
    name: 'webDeploy'
    params: {
      skuName: 'S1'
      location: location
    }
  }

  Resource and module decorators

  @batchSize(3)
  resource storageAccountResources 'Microsoft.Storage/storageAccounts@2019-06-01' = [for storageName in storageAccounts: {
    ...
  }]


  Outputs

  output storageEndpoint object = stg.properties.primaryEndpoints

  Loops

  You can add iterative loops to your Bicep file to define multiple copies of a:

  resource
  module
  variable
  property
  output

  Use the for expression to define a loop.

  param moduleCount int = 2

module stgModule './example.bicep' = [for i in range(0, moduleCount): {
  name: '${i}deployModule'
  params: {
  }
}]

Conditional deployment

param deployZone bool

resource dnsZone 'Microsoft.Network/dnszones@2018-05-01' = if (deployZone) {
  name: 'myZone'
  location: 'global'
}

Whitespace

Bicep is newline sensitive. For example:

resource sa 'Microsoft.Storage/storageAccounts@2019-06-01' = if (newOrExisting == 'new') {
    ...
  }

  Can't be written as:

  resource sa 'Microsoft.Storage/storageAccounts@2019-06-01' =
    if (newOrExisting == 'new') {
      ...
    }


Comments

Use // for single-line comments or /* ... */ for multi-line comments

The following example shows a single-line comment.

// This is your primary NIC.
resource nic1 'Microsoft.Network/networkInterfaces@2020-06-01' = {
   ...
}

The following example shows a multi-line comment.

/*
  This Bicep file assumes the key vault already exists and
  is in same subscription and resource group as the deployment.
*/
param existingKeyVaultName string


Multi-line strings

The following example shows a multi-line string.
var stringVar = '''
this is multi-line
  string with formatting
  preserved.
'''

The preceding example is equivalent to the following JSON.
"variables": {
    "stringVar": "this is multi-line\r\n  string with formatting\r\n  preserved.\r\n"
  }

  Multiple-line declarations

  var foo = resourceGroup(
  mySubscription,
  myRgName)